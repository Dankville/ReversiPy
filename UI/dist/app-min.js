const SPA=(e=>{"use strict";let n,a,i,s;n=(n=>{a=e(n),e("#game-toggle-open").on("click",()=>{o()})});let o=()=>{if(null==i){let n=SPA.ResponseModule.getPlayerToken,o=SPA.ResponseModule.joinGame;(i=c()).append(t()),a.append(i),n().then(e=>s=e.playerToken).then(e=>o(e)).then(n=>{const a=n.gameColumns,s=n.gameGrid;n.gameToken;i.find(".section-header").append(-1==n.playerColor?" (b)":" (w)"),SPA.GameModule.init(i,a,s);const o=e(i).find(".reversi-field");e(o).on("click",n=>{let a=e(n.target).data();d(a.col,a.row)}),r(),e("#splash-container").css("display","none")}).catch(e=>console.error(new Error(e))),e("#game-toggle-close").on("click",l)}else i.css("display","inline-block")},l=()=>{null!=i&&i.css("display","none")},d=(e,n)=>{return new Promise((a,i)=>{SPA.ResponseModule.move(0,e,n,s).catch(()=>{alert("something went wrong.")})})},r=()=>{SPA.ResponseModule.subscribe(s,SPA.GameModule.updateGrid)},t=()=>e('\n                <div id="splash-container">\n                    <div class="ring-wrapper">\n                        <div class="outer ring">\n                        </div>\n                    </div>\n                    <div class="ring-wrapper">\n                        <div class="inner ring">\n                        </div>\n                    </div>\n                    <div class="ring-wrapper">\n                        <div class="middle ring">\n                        </div>\n                    </div>\n                </div>\n                '),c=()=>e('\n                <div id="reversi-board-container">\n                    <span class="close" id="game-toggle-close"></span>\n                    <h3 class="section-header"> Reversi </h3>\n                    \n                </div>\n            ');return{init:n}})($);SPA.GameModule=(e=>{"use strict";let n,a,i,s,o,l,d,r,t=[];n=((n,a,p)=>{r=a,s=p,i=n;for(let e=0;e<s.length;e++)t.push([]);l=e('<div id="row-info">'),d=e('<div id="col-info">'),o=e('<div id="reversi-board">'),s.forEach((n,a)=>{const i=a+1;e(l).append('<div class="row-info-cell"> <span>'+i+"</span> </div>"),n.forEach((n,l)=>{const d=r[l],p=s[a][l],v=e('<div data-row="'+i+'" data-col="'+d+'" data-played='+p+' class="reversi-field"></div>');0!=p&&v.append(c()),t[a].push(v),e(o).append(v)})}),r.forEach(n=>{e(d).append('<div class="col-info-cell">'+n+"</div>")}),e(i).append(l),e(i).append(o),e(i).append(d)}),a=(e=>{let n=0;e.forEach(e=>{let a=0;e.forEach(e=>{const i=e,o=s[n][a];i!=o&&(0==o&&t[n][a].append(c()),t[n][a].attr("data-played",i)),a++}),n++}),s=e});let c=()=>e('<div class="fiche"></div>');return{init:n,updateGrid:a,test:()=>{console.log("test")}}})($),SPA.ResponseModule=(e=>{"use strict";let n,a,i,s,o,l="http://localhost:5001";return{move:n=((n,a,i,s)=>new Promise((o,d)=>e.ajax({url:l+"/api/Spel/Zet",method:"PUT",data:JSON.stringify({moveType:n,col:a,row:i,playerToken:s}),success:e=>{o(e)},failed:e=>{d("failed")}}))),getGameInfo:a=((n=0)=>new Promise((a,i)=>e.ajax(l+"/api/Spel/"+n,{success:e=>{a(e)},failed:e=>{i("failed")}}))),getPlayerToken:i=(()=>new Promise((n,a)=>e.ajax(l+"/api/Spel/GetPlayerToken",{method:"GET",success:e=>{n(e)},failed:e=>{a("failed")}}))),joinGame:s=(n=>new Promise((a,i)=>e.ajax(l+"/api/Spel/JoinGame/"+n,{method:"GET",success:e=>{a(e)},failed:e=>{i("failed")}}))),subscribe:o=((e,n)=>{new EventSource(l+"/api/Spel/Event/"+e).onmessage=(e=>{if("1"!=e.data){let a=e.data.split("'")[1],i=JSON.parse(a);n(i)}})})}})($);